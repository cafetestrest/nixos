[Commands]
1\Command="/*\nThis adds support for KDE, Gnome, Sway and Hyprland Wayland sessions.\n\nFor Sway and Hyprland, this requires:\n- `ydotool` utility to send copy/paste shortcuts to applications\n- `grim` for taking screenshot\n- `slurp` for selecting screenshot area\n\nFor KDE, this requires Spectacle for taking screenshots.\n\nGetting current window title is not supported in KDE.\n\nGlobal shortcut commands can be triggered with:\n\n    copyq triggerGlobalShortcut {COMMAND_NAME}\n\nOn Gnome, clipboard monitor is executed as X11 app using XWayland.\n\nLinks:\n- https://github.com/ReimuNotMoe/ydotool\n- https://github.com/emersion/grim\n- https://github.com/emersion/slurp\n*/\n\nfunction isSway() {\n    return env('SWAYSOCK').length != 0\n}\n\nfunction isHyprland() {\n    return env('HYPRLAND_CMD').length != 0\n}\n\nfunction isGnome() {\n    return str(env('XAUTHORITY')).includes('mutter-Xwayland')\n}\n\nfunction run() {\n    var p = execute.apply(this, arguments)\n    if (!p) {\n        throw 'Failed to start ' + arguments[0]\n    }\n    if (p.exit_code !== 0) {\n        throw 'Failed command ' + arguments[0] + ': ' + str(p.stderr)\n    }\n    return p.stdout\n}\n\nfunction swayGetTree() {\n    var tree = run('swaymsg', '--raw', '--type', 'get_tree')\n    return JSON.parse(str(tree))\n}\n\nfunction swayFindFocused(tree) {\n    var nodes = tree['nodes'].concat(tree['floating_nodes'])\n    for (var i in nodes) {\n        var node = nodes[i]\n        if (node['focused'])\n            return node\n        var focusedNode = swayFindFocused(node)\n        if (focusedNode)\n            return focusedNode\n    }\n    return undefined\n}\n\nfunction hyprlandFindFocused() {\n    var window = run('hyprctl', '-j', 'activewindow')\n    return JSON.parse(str(window))\n}\n\nfunction sendShortcut(...shortcut) {\n    sleep(100)\n    run('ydotool', 'key', ...shortcut)\n}\n\nglobal.currentWindowTitle = function() {\n    if (isSway()) {\n        var tree = swayGetTree()\n        var focusedNode = swayFindFocused(tree)\n        return focusedNode ? focusedNode['name'] : ''\n    } else if (isHyprland()) {\n        var focusedWindow = hyprlandFindFocused()\n        return focusedWindow ? focusedWindow['title'] : ''\n    }\n    return ''\n}\n\nglobal.paste = function() {\n    sendShortcut('42:1', '110:1', '110:0', '42:0')\n}\n\nvar copy_ = global.copy\nglobal.copy = function() {\n    if (arguments.length == 0) {\n        sendShortcut('29:1', '46:1', '46:0', '29:0')\n    } else {\n        copy_.apply(this, arguments)\n    }\n}\n\nglobal.focusPrevious = function() {\n    hide()\n}\n\nvar monitorClipboard_ = monitorClipboard\nmonitorClipboard = function() {\n    if (isGnome() && env('QT_QPA_PLATFORM') != 'xcb') {\n        serverLog('Starting X11 clipboard monitor')\n        setEnv('QT_QPA_PLATFORM', 'xcb')\n        execute('copyq', '--clipboard-access', 'monitorClipboard')\n        serverLog('Stopping X11 clipboard monitor')\n        return\n    }\n    return monitorClipboard_()\n}\n\nvar onClipboardChanged_ = onClipboardChanged\nonClipboardChanged = function() {\n    var title = currentWindowTitle()\n    if (title)\n        setData(mimeWindowTitle, title)\n    onClipboardChanged_()\n}\n\nscreenshot = function(format, screenName) {\n    if (isSway() || isHyprland())\n        return run('grim', '-t', format || 'png', '-')\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nscreenshotSelect = function(format, screenName) {\n    if (isSway() || isHyprland()) {\n        var geometry = run('slurp')\n        geometry = str(geometry).trim()\n        return run('grim', '-c', '-g', geometry, '-t', format || 'png', '-')\n    }\n    return run(\n        'spectacle',\n        '--background',\n        '--nonotify',\n        '--pointer',\n        '--region',\n        '--output',\n        '/dev/stdout',\n    )\n}\n\nglobal.triggerGlobalShortcut = function(commandName) {\n    var cmds = commands()\n    for (var i in cmds) {\n        var cmd = cmds[i]\n        if (cmd.isGlobalShortcut && cmd.enable && cmd.name == commandName)\n            return action(cmd.cmd)\n    }\n    throw 'Failed to find enabled global command with given name'\n}"
1\Icon=
1\IsScript=true
1\Name=Wayland Support
2\Command=copyq: plugins.itempinned.pin()
2\Icon=
2\InMenu=true
2\Input=!OUTPUT
2\InternalId=copyq_pinned_pin
2\Name=Pin
2\Output=application/x-copyq-item-pinned
3\Command=copyq: plugins.itempinned.unpin()
3\Icon=
3\InMenu=true
3\Input=application/x-copyq-item-pinned
3\InternalId=copyq_pinned_unpin
3\Name=Unpin
4\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
4\Icon=
4\InMenu=true
4\InternalId=copyq_tags_tag:Important
4\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
4\Name=Tag as “Important”
5\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
5\Icon=
5\InMenu=true
5\InternalId=copyq_tags_untag:Important
5\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
5\Name=Remove tag “Important”
6\Command=copyq: plugins.itemtags.tag()
6\Icon=
6\InMenu=true
6\InternalId=copyq_tags_tag
6\Name=Add a Tag
7\Command=copyq: plugins.itemtags.untag()
7\Icon=
7\InMenu=true
7\Input=application/x-copyq-tags
7\InternalId=copyq_tags_untag
7\Name=Remove a Tag
8\Command=copyq: plugins.itemtags.clearTags()
8\Icon=
8\InMenu=true
8\Input=application/x-copyq-tags
8\InternalId=copyq_tags_clear
8\Name=Clear all tags
size=8
